# app/pipelines/upload_rag.py

import os
import uuid
import numpy as np
from pathlib import Path
from dotenv import load_dotenv

from qdrant_client import QdrantClient
from qdrant_client.http.models import VectorParams, Distance, PointStruct

from langchain.document_loaders import TextLoader, MarkdownLoader, PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_huggingface import HuggingFaceEmbeddings

# ---- 1. Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env ----
project_root = Path(__file__).resolve().parent.parent
load_dotenv(dotenv_path=project_root / ".env")

QDRANT_URL          = os.getenv("QDRANT_URL")
QDRANT_API_KEY      = os.getenv("QDRANT_API_KEY")
COLLECTION_NAME     = os.getenv("QDRANT_COLLECTION_NAME", "quy_che_full")
EMBEDDING_MODEL_NAME= os.getenv("LOCAL_EMBEDDING_MODEL_NAME")
CHUNK_SIZE          = int(os.getenv("CHUNK_SIZE", 800))
CHUNK_OVERLAP       = int(os.getenv("CHUNK_OVERLAP", 400))

# ---- 2. Kh·ªüi t·∫°o QdrantClient & t·∫°o (n·∫øu ch∆∞a c√≥) collection ----
client = QdrantClient(
    url=QDRANT_URL,
    api_key=QDRANT_API_KEY,
    prefer_grpc=False  # ho·∫∑c True n·∫øu b·∫°n ∆∞u ti√™n gRPC
)

# N·∫øu collection ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
if not client.collections_api.exists(collection_name=COLLECTION_NAME):
    client.create_collection(
        collection_name=COLLECTION_NAME,
        vectors_config=VectorParams(size=128, distance=Distance.COSINE)
    )
    print(f"[INFO] ƒê√£ t·∫°o m·ªõi collection `{COLLECTION_NAME}` tr√™n Qdrant.")
else:
    print(f"[INFO] Collection `{COLLECTION_NAME}` ƒë√£ t·ªìn t·∫°i, s·∫Ω upsert th√™m d·ªØ li·ªáu.")

# ---- 3. Kh·ªüi t·∫°o Embedder (d√πng HuggingFaceEmbeddings thay cho SentenceTransformerEmbeddings) ----
# N·∫øu tr∆∞·ªõc ƒë√¢y b·∫°n d√πng SentenceTransformerEmbeddings(model_name=EMBEDDING_MODEL_NAME),
# th√¨ gi·ªù ƒë·ªïi th√†nh:
embeddings_model = HuggingFaceEmbeddings(
    model_name=EMBEDDING_MODEL_NAME,
    model_kwargs={"device": "cpu"}  # ho·∫∑c "cuda" n·∫øu b·∫°n c√≥ GPU v√† torch h·ªó tr·ª£
    # n·∫øu EMBEDDING_MODEL_NAME c·∫ßn custom pooling (SimCSE), th√™m "trust_remote_code": True
)

# ---- 4. Text splitter (kh√¥ng thay ƒë·ªïi) ----
text_splitter = RecursiveCharacterTextSplitter(
    chunk_size=CHUNK_SIZE,
    chunk_overlap=CHUNK_OVERLAP
)

def upload_document_to_qdrant(
    file_path: str,
    document_type: str,
    collection_name: str
):
    """
    Chia file th√†nh t·ª´ng ƒëo·∫°n (chunk), t√≠nh embedding, r·ªìi upsert v√†o Qdrant.
    file_path: ƒë∆∞·ªùng d·∫´n t·ªõi file (txt/md/pdf).
    document_type: metadata ƒë·ªÉ ph√¢n bi·ªát (Regulation, FAQ, RelatedIssue, v.v.).
    collection_name: t√™n collection Qdrant.
    """
    # 4.1. Ch·ªçn loader d·ª±a tr√™n ƒëu√¥i file
    ext = Path(file_path).suffix.lower()
    if ext == ".txt":
        loader = TextLoader()
    elif ext == ".md":
        loader = MarkdownLoader()
    elif ext == ".pdf":
        loader = PyPDFLoader()
    else:
        print(f"[WARN] Lo·∫°i file {ext} ch∆∞a h·ªó tr·ª£: b·ªè qua {file_path}")
        return

    # 4.2. Load to√†n b·ªô Document t·ª´ file
    documents = loader.load(file_path=file_path)

    # 4.3. Chia th√†nh chunks
    chunks = text_splitter.split_documents(documents)

    # 4.4. Chu·∫©n b·ªã list PointStruct ƒë·ªÉ upsert
    points = []
    for chunk in chunks:
        vector = embeddings_model.embed_query(chunk.page_content)
        points.append(
            PointStruct(
                id=str(uuid.uuid4()),   # t·∫°o ID duy nh·∫•t cho m·ªói chunk
                vector=vector,
                payload={
                    "content": chunk.page_content,
                    "metadata": {
                        "document_type": document_type,
                        "source_file": Path(file_path).name
                    }
                }
            )
        )

    # 4.5. Upsert l√™n Qdrant
    client.upsert(
        collection_name=collection_name,
        points=points
    )
    print(f"[OK] ƒê√£ upsert {len(points)} chunks t·ª´ `{Path(file_path).name}` v√†o `{collection_name}`.")

if __name__ == "__main__":
    # ---- 5. X√°c ƒë·ªãnh c√°c th∆∞ m·ª•c d·ªØ li·ªáu v√† g·ªçi h√†m upload ----
    data_dir = project_root / "data"
    regulations_dir    = data_dir / "regulations"
    faq_dir            = data_dir / "faq"
    related_issues_dir = data_dir / "related_issues"

    # N·∫øu ch∆∞a c√≥ th∆∞ m·ª•c, b·∫°n c√≥ th·ªÉ t·∫°o b·∫±ng tay ho·∫∑c t·ª± ƒë·ªông t·∫°o:
    for folder in (regulations_dir, faq_dir, related_issues_dir):
        if not folder.exists():
            folder.mkdir(parents=True, exist_ok=True)
            print(f"[WARN] T·∫°o m·ªõi th∆∞ m·ª•c: {folder} (hi·ªán ƒëang r·ªóng)")

    # 5.1. Process Regulations (txt, md, pdf)
    if regulations_dir.exists():
        for filename in os.listdir(regulations_dir):
            file_path = regulations_dir / filename
            if file_path.suffix.lower() in {".txt", ".md", ".pdf"}:
                upload_document_to_qdrant(
                    str(file_path),
                    document_type="Regulation",
                    collection_name=COLLECTION_NAME
                )
    else:
        print(f"[ERROR] Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {regulations_dir}")

    # 5.2. Process FAQs
    if faq_dir.exists():
        for filename in os.listdir(faq_dir):
            file_path = faq_dir / filename
            if file_path.suffix.lower() in {".txt", ".md", ".pdf"}:
                upload_document_to_qdrant(
                    str(file_path),
                    document_type="FAQ",
                    collection_name=COLLECTION_NAME
                )
    else:
        print(f"[ERROR] Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {faq_dir}")

    # 5.3. Process Related Issues
    if related_issues_dir.exists():
        for filename in os.listdir(related_issues_dir):
            file_path = related_issues_dir / filename
            if file_path.suffix.lower() in {".txt", ".md", ".pdf"}:
                upload_document_to_qdrant(
                    str(file_path),
                    document_type="RelatedIssue",
                    collection_name=COLLECTION_NAME
                )
    else:
        print(f"[ERROR] Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {related_issues_dir}")

    print("üéâ Ho√†n t·∫•t qu√° tr√¨nh upload d·ªØ li·ªáu l√™n Qdrant.")
